{"version":3,"sources":["components/Tile.js","components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Tile","_ref","color","swapTile","target","index","size","React","createElement","onClick","e","style","backgroundColor","height","width","className","Board","board","tileSize","map","row","i","key","concat","tile","j","column","red","green","blue","value","App","_useState","useState","_useState2","_slicedToArray","setBoard","_useState3","_useState4","setHeight","_useState5","_useState6","setWidth","_useState7","_useState8","selected","setSelected","_useState9","_useState10","gameOver","setGameOver","_useState11","_useState12","scrambleNewBoards","setScrambleNewBoards","_useState13","_useState14","lockEdges","setLockEdges","_useState15","_useState16","setTileSize","Color","this","createNewBoard","w","h","newBoard","push","colorCorner","gradientColor","scramble","corner","Math","floor","random","x","y","length","idx","useEffect","_toConsumableArray","rowOne","columnOne","rowTwo","columnTwo","temp","win","console","log","checkWin","Fragment","classList","add","setTimeout","myTile","swap","remove","type","min","max","onChange","parseInt","checked","id","name","for","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46d31dd9.chunk.js","sourcesContent":["import React from 'react';\n\nconst Tile = ({color, target, swapTile, index, size }) => {\n\n    function handleEvent() {\n        return function(e) {\n            swapTile(e, index); \n        };\n    }\n   \n  return <div onClick = {handleEvent()} style = {{backgroundColor: color, height: size, width: size}} className = \"tile\"> \n</div>};\n\nexport default Tile;\n","import React from \"react\";\nimport Tile from \"./Tile\";\n\nconst Board = ({ board, swapTile, tileSize }) => {\n  return (\n    <div>\n      {board.map((row, i) => (\n        <div className=\"row\" key={`row-${i}`}>\n          {row &&\n            row.map((tile, j) => (\n              <Tile\n                size={tileSize}\n                index={{ row: i, column: j }}\n                swapTile={swapTile}\n                target={`rgb(${\n                  (tile && tile.target && tile.target.red) || 0\n                }, ${(tile && tile.target && tile.target.green) || 0}, ${\n                  (tile && tile.target && tile.target.blue) || 0\n                })`}\n                color={`rgb(${(tile && tile.value && tile.value.red) || 0}, ${\n                  (tile && tile.value && tile.value.green) || 0\n                }, ${(tile && tile.value && tile.value.blue) || 0})`}\n                key={`tile-${i}-${j}`}\n              />\n            ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport './App.css';\nimport Board from './components/Board'\nimport { useState, useEffect } from 'react'\n\nfunction App() {\n\n  const [board, setBoard] = useState([[1, 2, 3], [4, 5, 6], [7, 8, 9]]);\n  const [height, setHeight] = useState(6);\n  const [width, setWidth] = useState(6);\n  const [selected, setSelected] = useState([]);\n  const [gameOver, setGameOver] = useState(false);\n  const [scrambleNewBoards, setScrambleNewBoards] = useState(true)\n  const [lockEdges, setLockEdges] = useState(true)\n  const [tileSize, setTileSize] = useState(80 / 6);\n\n  useEffect(() => {\n    createNewBoard();\n  }, [])\n  \n\n  function Color(red, green, blue) {\n      this.red = red;\n      this.green = green;\n      this.blue = blue;\n    }\n  \n\n  function createNewBoard() {\n    let w = width > 1 ? width : 2;\n    let h = height > 1 ? height : 2;\n    setTileSize((w > 30) ? `${70 / w}vw` : `${40 / w}vw`);\n    setGameOver(false);\n    let newBoard = [];\n    for (let i = 0; i < h; i++) {\n      let row = [];\n      for (let j = 0; j < w; j++) {\n        row.push({})\n      }\n      newBoard.push(row)\n    }\n      \n                    \n    colorCorner(newBoard[0][0]);\n    colorCorner(newBoard[0][w - 1]);\n    colorCorner(newBoard[h - 1][0]);\n    colorCorner(newBoard[h - 1][w - 1]);\n    //fill in left and right columns\n    for (let i = 1; i < h - 1; i++) {\n        newBoard[i][0].target = newBoard[i][0].value = gradientColor(newBoard[0][0], newBoard[h - 1][0], h, i);\n        newBoard[i][w - 1].target = newBoard[i][w - 1].value = gradientColor(newBoard[0][w - 1], newBoard[h - 1][w - 1], h, i);\n    }\n    // fill in rows\n    for (let row = 0; row < h; row++) {\n      for (let column = 1; column < w - 1; column++) {\n        newBoard[row][column].target = newBoard[row][column].value = gradientColor(newBoard[row][0], newBoard[row][w - 1], w, column);\n      }\n    }\n    setBoard(newBoard);\n    if (scrambleNewBoards) {\n      scramble(newBoard);\n    }\n\n  }\n\n  function colorCorner(tile) {\n    tile.corner = true;\n    tile.target = tile.value = new Color(Math.floor(Math.random() * 255), Math.floor(Math.random() * 255), Math.floor(Math.random() * 255))\n  }\n\n  function gradientColor(x, y, length, idx) {\n    return new Color(x.value.red + idx * ((y.value.red - x.value.red) / (length - 1)), x.value.green + idx * ((y.value.green - x.value.green) / (length - 1)), x.value.blue + idx * ((y.value.blue - x.value.blue) / (length - 1)))\n  } \n\n  const scramble = (board) => {\n    setGameOver(false);\n    let newBoard = [...board];\n    for (let i = 0; i < 40 * height; i++) {\n      let rowOne;\n      let columnOne;\n      let rowTwo;\n      let columnTwo;\n      if (lockEdges) {\n        rowOne = Math.floor(Math.random() * (height - 2)) + 1;\n        columnOne = Math.floor(Math.random() * (width - 2)) + 1;\n        rowTwo = Math.floor(Math.random() * (height - 2)) + 1;\n        columnTwo = Math.floor(Math.random() * (width - 2)) + 1;\n      }\n      else {\n      rowOne = Math.floor(Math.random() * height);\n      columnOne = Math.floor(Math.random() * width);\n      rowTwo = Math.floor(Math.random() * height);\n      columnTwo = Math.floor(Math.random() * width);\n      }\n      if (!newBoard[rowOne][columnOne].corner && !newBoard[rowTwo][columnTwo].corner) {\n        let temp = newBoard[rowOne][columnOne].value;\n        newBoard[rowOne][columnOne].value = newBoard[rowTwo][columnTwo].value;\n        newBoard[rowTwo][columnTwo].value = temp;\n      }\n    }\n    setBoard(newBoard);\n  }\n\n  const swap = (myTile) => { \n      setSelected([...selected, myTile]);\n\n      let newBoard = [...board];\n      if (!newBoard[selected[0].index.row][selected[0].index.column].corner && !newBoard[myTile.index.row][myTile.index.column].corner) {\n        let temp = newBoard[selected[0].index.row][selected[0].index.column].value;\n        newBoard[selected[0].index.row][selected[0].index.column].value = newBoard[myTile.index.row][myTile.index.column].value;\n        newBoard[myTile.index.row][myTile.index.column].value = temp;\n      }\n      setBoard(newBoard);\n      if (checkWin()) {\n          win()\n      }\n\n  }\n  \n  const win = () => {\n    console.log(\"you won\")\n    setGameOver(true);\n  }\n\n  const checkWin = () => {\n    for (let i = 0; i < height; i++) {\n      for (let j = 0; j < width; j++) {\n        if (board[i][j].value.red !== board[i][j].target.red || board[i][j].value.green !== board[i][j].target.green || board[i][j].value.blue !== board[i][j].target.blue) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  const swapTile = (e, index) => {\n    e.target.classList.add(\"selected\");\n    if (selected.length < 1) {\n      setSelected([...selected, {index: index, tile: e.target}]);\n    }\n    else {\n      //setSelected([...selected, {index: index, tile: e.target}]);\n      setTimeout(() => {\n        swap({index: index, tile: e.target});\n        e.target.classList.remove(\"selected\");\n        selected[0].tile.classList.remove(\"selected\");\n        setSelected([]);\n\n      }, 100);\n\n      // selected[0].tile.classList.remove(\"selected\");\n      // setSelected([]);\n    }\n    \n  }\n\n  const changeSize = (size) => {\n    setHeight(size > 60 ? 60 : size);\n    setWidth(size > 120 ? 120 : size);\n\n  }\n \n\n\n\n  // function swap(x, y, brd) {\n  //   let temp = x;\n  //   x = y;\n  //   y = temp;\n  //   return brd;\n  // }\n\n  return (\n    <div className=\"App\">\n        <h3> Objective: Rearrange the tiles to form a gradient! Swap tiles to move them around the board. Corners are always locked in place and can't be moved.</h3>\n        <div className=\"board-container\">\n        {gameOver ? <h1> You Solved It! </h1> : <></>}\n          <Board tileSize={tileSize} swapTile = {swapTile} board = {board}/>\n        </div>\n        <button onClick = {createNewBoard}> New Board </button> \n        <button onClick = {() => {scramble(board)}}> Scramble Board </button>\n        <div className=\"inputs\">\n        <p> Difficulty(size) : </p>\n        <input value={width} type = \"number\" min={2} max={50} onChange={(e) => changeSize(parseInt(e.target.value))}/> \n        <input onChange={(e) =>  setLockEdges(e.target.checked)} checked={lockEdges} type=\"checkbox\" id=\"lock-edges\" name=\"Lock Edges \"/>\n        <label for=\"lock-edges\"> Don't Scramble Edge Tiles </label>\n        <input onChange={(e) =>  setScrambleNewBoards(e.target.checked)} checked={scrambleNewBoards} type=\"checkbox\"id=\"scramble-new-boards\" name=\"Automatically Scramble New Boards\" />\n        <label for=\"scramble-new-boards\"> Automatically Scramble New Boards</label>\n        </div>\n\n    </div>\n  );\n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}